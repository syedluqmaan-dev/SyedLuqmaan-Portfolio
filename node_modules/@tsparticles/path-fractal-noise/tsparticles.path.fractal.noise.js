/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.9.1
 */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@tsparticles/engine"), require("@tsparticles/fractal-noise"));
	else if(typeof define === 'function' && define.amd)
		define(["@tsparticles/engine", "@tsparticles/fractal-noise"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@tsparticles/engine"), require("@tsparticles/fractal-noise")) : factory(root["window"], root["window"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, (__WEBPACK_EXTERNAL_MODULE__tsparticles_engine__, __WEBPACK_EXTERNAL_MODULE__tsparticles_fractal_noise__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/browser/FractalNoiseGenerator.js":
/*!***********************************************!*\
  !*** ./dist/browser/FractalNoiseGenerator.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FractalNoiseGenerator: () => (/* binding */ FractalNoiseGenerator)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"@tsparticles/engine\");\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tsparticles_fractal_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tsparticles/fractal-noise */ \"@tsparticles/fractal-noise\");\n/* harmony import */ var _tsparticles_fractal_noise__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_fractal_noise__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst defaultOptions = {\n  size: 20,\n  increment: 0.004,\n  columns: 0,\n  rows: 0,\n  layers: 0,\n  width: 0,\n  height: 0,\n  offset: {\n    x: 40000,\n    y: 40000,\n    z: 40000\n  }\n};\nclass FractalNoiseGenerator {\n  constructor() {\n    this._fractal = new _tsparticles_fractal_noise__WEBPACK_IMPORTED_MODULE_1__.FractalNoise();\n    this.field = [];\n    this.noiseW = 0;\n    this.options = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      point = {\n        x: Math.max(Math.floor(pos.x / this.options.size), 0),\n        y: Math.max(Math.floor(pos.y / this.options.size), 0),\n        z: Math.max(Math.floor(pos.z / this.options.size), 0)\n      },\n      v = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n    if (!this.field?.[point.x]?.[point.y]?.[point.z]) {\n      return v;\n    }\n    v.setTo(this.field[point.x][point.y][point.z]);\n    return v;\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseW += this.options.increment;\n  }\n  _calculateField() {\n    const options = this.options;\n    for (let x = 0; x < options.columns; x++) {\n      for (let y = 0; y < options.rows; y++) {\n        for (let z = 0; z < options.layers; z++) {\n          this.field[x][y][z].angle = this._fractal.noise4d(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;\n          this.field[x][y][z].length = this._fractal.noise4d(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);\n        }\n      }\n    }\n  }\n  _initField() {\n    this.field = new Array(this.options.columns);\n    for (let x = 0; x < this.options.columns; x++) {\n      this.field[x] = new Array(this.options.rows);\n      for (let y = 0; y < this.options.rows; y++) {\n        this.field[x][y] = new Array(this.options.layers);\n        for (let z = 0; z < this.options.layers; z++) {\n          this.field[x][y][z] = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n        }\n      }\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options;\n    this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    this.options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    this.options.width = container.canvas.size.width;\n    this.options.height = container.canvas.size.height;\n    const offset = sourceOptions.offset;\n    this.options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    this.options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    this.options.offset.z = offset?.z ?? defaultOptions.offset.z;\n    this.options.seed = sourceOptions.seed;\n    this._fractal.seed(this.options.seed ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)());\n    this.options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    this.options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseW = 0;\n    this._resetField();\n    addEventListener(\"resize\", () => this._resetField());\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/path-fractal-noise/./dist/browser/FractalNoiseGenerator.js?\n}");

/***/ }),

/***/ "./dist/browser/index.js":
/*!*******************************!*\
  !*** ./dist/browser/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fractalNoisePathName: () => (/* binding */ fractalNoisePathName),\n/* harmony export */   loadFractalNoisePath: () => (/* binding */ loadFractalNoisePath)\n/* harmony export */ });\n/* harmony import */ var _FractalNoiseGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FractalNoiseGenerator.js */ \"./dist/browser/FractalNoiseGenerator.js\");\n\nconst fractalNoisePathName = \"fractalNoise\";\nasync function loadFractalNoisePath(engine, refresh = true) {\n  engine.checkVersion(\"3.9.1\");\n  await engine.addPathGenerator(fractalNoisePathName, new _FractalNoiseGenerator_js__WEBPACK_IMPORTED_MODULE_0__.FractalNoiseGenerator(), refresh);\n}\n\n//# sourceURL=webpack://@tsparticles/path-fractal-noise/./dist/browser/index.js?\n}");

/***/ }),

/***/ "@tsparticles/engine":
/*!*********************************************************************************************************************************!*\
  !*** external {"commonjs":"@tsparticles/engine","commonjs2":"@tsparticles/engine","amd":"@tsparticles/engine","root":"window"} ***!
  \*********************************************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__tsparticles_engine__;

/***/ }),

/***/ "@tsparticles/fractal-noise":
/*!******************************************************************************************************************************************************!*\
  !*** external {"commonjs":"@tsparticles/fractal-noise","commonjs2":"@tsparticles/fractal-noise","amd":"@tsparticles/fractal-noise","root":"window"} ***!
  \******************************************************************************************************************************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__tsparticles_fractal_noise__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/browser/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});