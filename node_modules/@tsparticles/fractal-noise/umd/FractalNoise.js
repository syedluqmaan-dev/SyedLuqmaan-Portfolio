(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/smooth-value-noise"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FractalNoise = void 0;
    const smooth_value_noise_1 = require("@tsparticles/smooth-value-noise");
    class FractalNoise {
        constructor() {
            this._smoothValueNoise = new smooth_value_noise_1.SmoothValueNoise();
        }
        noise2d(x, y, octaves = 5, persistence = 0.5, lacunarity = 2.0) {
            let total = 0, frequency = 1, amplitude = 1, maxValue = 0;
            for (let i = 0; i < octaves; i++) {
                total += this._smoothValueNoise.noise2d(x * frequency, y * frequency) * amplitude;
                maxValue += amplitude;
                amplitude *= persistence;
                frequency *= lacunarity;
            }
            return total / maxValue;
        }
        noise3d(x, y, z, octaves = 5, persistence = 0.5, lacunarity = 2.0) {
            let total = 0, frequency = 1, amplitude = 1, maxValue = 0;
            for (let i = 0; i < octaves; i++) {
                total += this._smoothValueNoise.noise3d(x * frequency, y * frequency, z * frequency) * amplitude;
                maxValue += amplitude;
                amplitude *= persistence;
                frequency *= lacunarity;
            }
            return total / maxValue;
        }
        noise4d(x, y, z, w, octaves = 5, persistence = 0.5, lacunarity = 2.0) {
            let total = 0, frequency = 1, amplitude = 1, maxValue = 0;
            for (let i = 0; i < octaves; i++) {
                total +=
                    this._smoothValueNoise.noise4d(x * frequency, y * frequency, z * frequency, w * frequency) * amplitude;
                maxValue += amplitude;
                amplitude *= persistence;
                frequency *= lacunarity;
            }
            return total / maxValue;
        }
        seed(seed) {
            this._smoothValueNoise.seed(seed);
        }
    }
    exports.FractalNoise = FractalNoise;
});
